"""Fields necessary to create a new project"""
input CreateProjectInput {
  description: String!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String!]!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Fields necessary to follow or unfollow a user"""
input FollowUserInput {
  action: UserFollowActions
  userId: ID
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Like {
  author: User!
  createdAt: Date!
  id: ID!
  project: Project!
  user: User!
}

type Mutation {
  """Create a new like"""
  createLike(authorId: String!, projectId: String!): Like!

  """Create a new project"""
  createProject(input: CreateProjectInput!): Project!

  """Delete a like"""
  deleteLike(projectId: String!): Like!

  """Delete projects"""
  deleteProjects(projectIds: [String!]!): [String!]!

  """Follow or unfollow a user"""
  followUser(input: FollowUserInput!): User!

  """Login in as a admin"""
  loginAsAdmin(token: String!): String!

  """Create a new user"""
  signup(token: String!): String!

  """Update a project"""
  updateProject(input: CreateProjectInput!, projectId: String!): Project!

  """Update project status"""
  updateProjectStatus(isApproved: Boolean!, projectId: String!): Project!

  """Update the user information"""
  updateUser(input: UpdateUserInput!): User!

  """Update the user information as an admin"""
  updateUserAsAdmin(input: UpdateUserInputAsAdmin!): User!
  uploadImage(path: String!): String!
}

type Project {
  author: User!
  createdAt: Date!
  description: String!
  id: ID!
  isApproved: Boolean!
  isLiked: Boolean!
  likes: [Like!]!
  likesCount: Int!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String!]!
  title: String!
  updatedAt: Date!
}

"""Projects response"""
type ProjectsResponse {
  nextCursor: String
  prevCursor: String
  results: [Project!]!
  totalCount: Int!
}

type Query {
  """Get approved projects"""
  getApprovedProjects(input: SearchProjectsInput): ProjectsResponse!

  """Get the current user"""
  getCurrentUser: User!

  """Get most liked projects"""
  getMostLikedProjects(input: SearchProjectsInput): ProjectsResponse!

  """Get my projects"""
  getMyProjects(input: SearchProjectsInput): ProjectsResponse!

  """Get a project by id"""
  getProject(id: String!): Project!

  """Get projects for admin"""
  getProjectsAdmin(input: SearchProjectsInput): ProjectsResponse!

  """Get top creators for home page"""
  getTopCreatorsForHomePage: TopCreatorsResponse!

  """Get top projects"""
  getTopProjects(interval: String): TopProjectsResponse!

  """Get top projects for home page"""
  getTopProjectsForHomePage: TopProjectsResponse!

  """Get top users"""
  getTopUsers(interval: String): TopCreatorsResponse!

  """Get a user by id"""
  getUser(id: String!): User!

  """Get user projects"""
  getUserProjects(input: SearchProjectsInput, userId: String!): ProjectsResponse!

  """Get all users"""
  getUsers: [User!]!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

"""Search order"""
enum SearchOrder {
  asc
  desc
}

"""Search projects input"""
input SearchProjectsInput {
  cursor: String
  order: SearchOrder
  orderBy: String
  search: String
}

"""Top users response"""
type TopCreatorsResponse {
  results: [User!]!
}

"""Top projects response"""
type TopProjectsResponse {
  results: [Project!]!
}

"""Update the user information"""
input UpdateUserInput {
  avatar: String
  banned: Boolean
  bio: String
  cover: String
  discord: String
  location: String
  name: String
  twitter: String
  website: String
}

"""Update the user information as an admin"""
input UpdateUserInputAsAdmin {
  avatar: String
  banned: Boolean
  bio: String
  cover: String
  discord: String
  id: String
  location: String
  name: String
  role: String
  twitter: String
  website: String
}

type User {
  avatar: String
  banned: Boolean!
  bio: String
  cover: String
  createdAt: Date!
  discord: String
  email: String
  followers: [User!]!
  followersCount: Int!
  following: [User!]!
  followingCount: Int!
  github: String
  id: ID!
  isFollowing: Boolean!
  likesReceived: Int!
  location: String
  name: String!
  projects: [Project!]
  role: Role!
  twitter: String
  updatedAt: Date!
  website: String
}

"""Actions of follow or unfollow"""
enum UserFollowActions {
  FOLLOW
  UNFOLLOW
}