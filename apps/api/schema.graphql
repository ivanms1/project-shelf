"""Fields necessary to create a new project"""
input CreateProjectInput {
  description: String!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String!]!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar Date

"""Fields necessary to follow or unfollow a user"""
input FollowUserInput {
  action: UserFollowActions
  userId: ID
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON

type Mutation {
  """Create a new project"""
  createProject(input: CreateProjectInput!): Project!

  """Delete projects"""
  deleteProjects(projectIds: [String!]!): [String!]!

  """Follow or unfollow a user"""
  followUser(input: FollowUserInput!): User!

  """Like or remove like from a project"""
  reactToProject(input: ReactToProjectInput!): Project!

  """Create a new user"""
  signup(token: String!): String!

  """Update a project"""
  updateProject(input: CreateProjectInput!, projectId: String!): Project!

  """Update project status"""
  updateProjectStatus(isApproved: Boolean!, projectId: String!): Project!

  """Update the user information"""
  updateUser(input: UpdateUserInput!): User!
  uploadImage(path: String!): String!
}

type Project {
  author: User!
  createdAt: Date!
  description: String!
  id: ID!
  isApproved: Boolean!
  isLiked: Boolean!
  likes: [User!]!
  likesCount: Int!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String!]!
  title: String!
  updatedAt: Date!
}

"""Project actions"""
enum ProjectActions {
  DISLIKE
  LIKE
}

"""Projects response"""
type ProjectsResponse {
  nextCursor: String
  prevCursor: String
  results: [Project!]!
  totalCount: Int!
}

type Query {
  """Get approved projects"""
  getApprovedProjects(input: SearchProjectsInput): ProjectsResponse!

  """Get the current user"""
  getCurrentUser: User!

  """Get my projects"""
  getMyProjects(input: SearchProjectsInput): ProjectsResponse!

  """Get a project by id"""
  getProject(id: String!): Project!

  """Get projects for admin"""
  getProjectsAdmin(input: SearchProjectsInput): ProjectsResponse!

  """Get a user by id"""
  getUser(id: String!): User!

  """Get user projects"""
  getUserProjects(input: SearchProjectsInput, userId: String!): ProjectsResponse!

  """Get all users"""
  getUsers: [User!]!
}

"""React to project input"""
input ReactToProjectInput {
  action: ProjectActions!
  projectId: String!
}

"""User role"""
enum Role {
  ADMIN
  USER
}

"""Search order"""
enum SearchOrder {
  asc
  desc
}

"""Search projects input"""
input SearchProjectsInput {
  cursor: String
  order: SearchOrder
  orderBy: String
  search: String
}

"""Update the user information"""
input UpdateUserInput {
  avatar: String
  bio: String
  cover: String
  discord: String
  location: String
  name: String
  twitter: String
  website: String
}

type User {
  avatar: String
  bio: String
  cover: String
  createdAt: Date!
  discord: String
  email: String
  followerCount: Int!
  followers: [User!]!
  following: [User!]!
  followingCount: Int!
  github: String
  id: ID!
  isFollowing: Boolean!
  location: String
  name: String!
  projects: [Project!]
  projectsLiked: [Project!]!
  role: Role!
  twitter: String
  updatedAt: Date!
  website: String
}

"""Actions of follow or unfollow"""
enum UserFollowActions {
  FOLLOW
  UNFOLLOW
}