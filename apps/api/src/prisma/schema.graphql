### This file was generated by Nexus Schema
### Do not make changes to this file directly


input CreateProjectInput {
  description: String!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String]!
  title: String!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject @specifiedBy(url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf")

type Mutation {
  createProject(input: CreateProjectInput): Project
  deleteManyProjects(ids: [ID]!): JSONObject
  deleteProject(id: ID!): String
  login(email: String!, password: String!): JSONObject!
  reactToProject(input: ReactToProjectInput): Project
  signup(email: String!, name: String!, password: String!): JSONObject!
  updateProject(input: UpdateProjectInput, projectId: ID!): Project
  updateProjectStatus(isApproved: Boolean!, projectId: String!): Project
  updateUser(input: UpdateUsertInput, userId: String!): User!
  uploadImage(path: String!): JSONObject
}

type Project {
  author: User!
  createdAt: DateTime!
  description: String!
  id: ID!
  isApproved: Boolean!

  """If this project is liked by the current user"""
  isLiked: Boolean
  likes: [User!]!
  likesCount: Int!
  preview: String!
  repoLink: String!
  siteLink: String!
  tags: [String!]!
  title: String!
}

"""Actions available to the user"""
enum ProjectAction {
  DISLIKE
  LIKE
}

type ProjectsResponse {
  nextCursor: String
  prevCursor: String
  results: [Project!]!
  totalCount: Int
}

type Query {
  """Get all approved projects"""
  getApprovedProjects(cursor: String): ProjectsResponse!
  getCurrentUser: User

  """Get all my projects"""
  getMyProjects(cursor: String): ProjectsResponse!
  getProject(id: ID!): Project

  """Admin query to get projects"""
  getProjectsAdmin(cursor: String): ProjectsResponse!
  getUser(id: ID!): User
  getUsers: [User]!
}

input ReactToProjectInput {
  action: ProjectAction!
  projectId: ID!
  userId: ID!
}

enum Role {
  ADMIN
  USER
}

input UpdateProjectInput {
  description: String
  preview: String
  repoLink: String
  siteLink: String
  tags: [String]
  title: String
}

"""Update the user information"""
input UpdateUsertInput {
  discord: String!
  email: String!
  github: String!
  name: String!
  role: Role!
}

type User {
  avatar: String
  discord: String
  email: String!
  github: String
  id: ID!
  name: String!
  projects: [Project!]
  projectsLiked: [Project!]
  role: Role!
}
